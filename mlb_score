#!/usr/bin/env python

import argparse
import os
import time
import requests
import json
from lifxlan import LifxLAN

# ANSI colors for terminal output
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
RESET = "\033[0m"

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def get_schedule():
    """Fetch the MLB schedule (all games today)."""
    url = "https://statsapi.mlb.com/api/v1/schedule?sportId=1"
    return requests.get(url).json()

def find_team_game(team_name):
    """Find today's game for the given team."""
    schedule = get_schedule()
    for date in schedule.get("dates", []):
        for game in date.get("games", []):
            teams = game.get("teams", {})
            home = teams.get("home", {})
            away = teams.get("away", {})

            if team_name.lower() in home.get("team", {}).get("name", "").lower():
                return game, "home"
            if team_name.lower() in away.get("team", {}).get("name", "").lower():
                return game, "away"
    return None, None

def get_game_feed(gamePk):
    """Fetch the full live data feed for a game."""
    url = f"https://statsapi.mlb.com/api/v1/game/{gamePk}/feed/live"
    return requests.get(url).json()

def pretty_score(game, team_side):
    """Pretty print scoreboard info for the team."""
    teams = game["teams"]
    home = teams["home"]
    away = teams["away"]

    if team_side == "home":
        team = home
        opp = away
    else:
        team = away
        opp = home

    team_name = team["team"]["name"]
    opp_name = opp["team"]["name"]
    team_score = team.get("score", 0)
    opp_score = opp.get("score", 0)
    status = game["status"]["detailedState"]

    # Colorize text output
    if team_score > opp_score:
        color = GREEN
    elif team_score < opp_score:
        color = RED
    else:
        color = YELLOW

    print("=== Pretty Scoreboard ===")
    print(f"{color}{team_name} ({team_score}) vs {opp_name} ({opp_score}) "
          f"| Game status: {status}{RESET}")

    return team_score, status

def get_color(name):
    """Return HSVK values for a given color name."""
    presets = {
        "orange": [6366, 65535, 65535, 3500],
        "red": [0, 65535, 65535, 3500],
        "blue": [43634, 65535, 65535, 3500],
        "green": [21845, 65535, 65535, 3500],
        "purple": [49151, 65535, 65535, 3500],
        "white": [0, 0, 65535, 3500],
    }
    return presets.get(name.lower(), presets["orange"])

def blink_lifx(color_name="orange", times=3, duration=0.5):
    """Blink all available LIFX lights in the chosen color."""
    lifx = LifxLAN()
    devices = lifx.get_lights()
    color = get_color(color_name)

    for _ in range(times):
        for light in devices:
            light.set_color(color, rapid=True)
        time.sleep(duration)
        for light in devices:
            light.set_power("off", rapid=True)
        time.sleep(duration)
        for light in devices:
            light.set_power("on", rapid=True)

def countdown(interval):
    """Show countdown until next poll."""
    for remaining in range(interval, 0, -1):
        print(f"\r⏱️ Next API check in {remaining} seconds... ", end="", flush=True)
        time.sleep(1)
    print("\r", end="")

def watch_team(team_name, color_name):
    """Continuously watch a team’s game and blink lights when they score."""
    last_score = None
    while True:
        clear_screen()
        game, side = find_team_game(team_name)
        if not game:
            print(f"No {team_name} game today.")
            interval = 3600
        else:
            team_score, status = pretty_score(game, side)

            if last_score is None:
                last_score = team_score
            elif team_score > last_score:
                print(f"\n🎉 {team_name} scored! {last_score} → {team_score}")
                blink_lifx(color_name)
                last_score = team_score

            # Adaptive polling
            if status == "In Progress":
                interval = 15
            elif status in ("Scheduled", "Pre-Game"):
                interval = 300
            elif status == "Final":
                interval = 3600
            else:
                interval = 60

        countdown(interval)

def list_teams():
    """Fetch and print all MLB teams with IDs."""
    url = "https://statsapi.mlb.com/api/v1/teams?sportId=1"
    data = requests.get(url).json()
    print("=== MLB Teams ===")
    for team in data.get("teams", []):
        print(f"{team['teamId']:>3} | {team['name']} ({team['abbreviation']})")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Watch MLB team scores and blink LIFX lights.")
    parser.add_argument("--team", help="Team name (e.g. 'Astros', 'Yankees')")
    parser.add_argument("--color", default="orange", help="Blink color (orange, red, blue, green, purple, white)")
    parser.add_argument("--dump", action="store_true", help="Dump full JSON from live feed for debugging")
    parser.add_argument("--list-teams", action="store_true", help="List all MLB teams and IDs")
    args = parser.parse_args()

    if args.list_teams:
        list_teams()
    elif args.dump:
        if not args.team:
            print("You must use --team with --dump")
        else:
            game, side = find_team_game(args.team)
            if not game:
                print(f"No {args.team} game today.")
            else:
                feed = get_game_feed(game["gamePk"])
                print(json.dumps(feed, indent=2))
    elif args.team:
        watch_team(args.team, args.color)
    else:
        parser.print_help()
